{
  "name": "admin",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^2.6.1",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.8.4",
    "bootstrap": "^5.3.3",
    "jquery": "^3.7.1",
    "mdb-react-ui-kit": "^9.0.0",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-dom": "^19.0.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.3.0",
    "react-scripts": "5.0.1",
    "reactjs-popup": "^2.0.6",
    "redux": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


import { createSlice } from "@reduxjs/toolkit"

const initialState = {
    isLoad: false,
    cartItem: JSON.parse(localStorage.getItem("list")) || [], // Initialize from localStorage
    error: false,
    localStorageItems: JSON.parse(localStorage.getItem("list")) || [],
}

const cartSlice = createSlice({
    name: "cart",
    initialState,
    reducers: {
        addTCart: (state, action) => {
            console.log("Action ", action.payload);
            state.cartItem.push(action.payload);
            localStorage.setItem("list", JSON.stringify(state.cartItem)); // Update localStorage
            state.localStorageItems = [...state.cartItem]; // Sync localStorageItems
            console.log("state ", state.cartItem.length);
        },
        getCartItem: (state) => {
            const storedItems = JSON.parse(localStorage.getItem("list")) || [];
            state.cartItem = storedItems;
            state.localStorageItems = storedItems;
        },
        removeTCart: (state, action) => {
            const ind = state.cartItem.findIndex((item) => item.id === action.payload.id);
            if (ind >= 0) {
                state.cartItem.splice(ind, 1);
                localStorage.setItem("list", JSON.stringify(state.cartItem)); // Update localStorage
                state.localStorageItems = [...state.cartItem]; // Sync localStorageItems
            } else {
                console.warn('Cannot remove item from cart. Item not found.');
            }
        },
    },
});

export const { addTCart, getCartItem, removeTCart } = cartSlice.actions;
export default cartSlice.reducer;
