{
  "name": "admin",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^2.6.1",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.8.4",
    "bootstrap": "^5.3.3",
    "jquery": "^3.7.1",
    "mdb-react-ui-kit": "^9.0.0",
    "react": "^19.0.0",
    "react-bootstrap": "^2.10.9",
    "react-dom": "^19.0.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.3.0",
    "react-scripts": "5.0.1",
    "reactjs-popup": "^2.0.6",
    "redux": "^5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  isLoad: false,
  cartItem: JSON.parse(localStorage.getItem("list")) || [],
  error: false,
};

const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addTCart: (state, action) => {
      const isExist = state.cartItem.some(item => item.id === action.payload.id);
      if (!isExist) {
        state.cartItem.push(action.payload);
        localStorage.setItem("list", JSON.stringify(state.cartItem));
      }
    },
    removeTCart: (state, action) => {
      state.cartItem = state.cartItem.filter(item => item.id !== action.payload.id);
      localStorage.setItem("list", JSON.stringify(state.cartItem));
    },
    getCartItem: (state) => {
      const storedItems = JSON.parse(localStorage.getItem("list")) || [];
      state.cartItem = storedItems;
    },
  },
});

export const { addTCart, removeTCart, getCartItem } = cartSlice.actions;
export default cartSlice.reducer;


import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  username: "",
  email: "",
  age: "",
  password: "",
  gender: "",
  subject: [],
  stream: "",
};

export const userSlice = createSlice({
  name: "users",
  initialState,
  reducers: {
    saveUser: (state, action) => {
      state.username = action.payload.username;
      state.email = action.payload.email;
      state.password = action.payload.password;
      state.age = action.payload.age;
      state.gender = action.payload.gender;
      state.subject = action.payload.subject;
      state.stream = action.payload.stream;

      const users = JSON.parse(localStorage.getItem("data")) || [];
      users.push(action.payload);
      localStorage.setItem("data", JSON.stringify(users));
    },
    updateUser: (state, action) => {
      state.username = action.payload.username;
      const users = JSON.parse(localStorage.getItem("data")) || [];
      users[action.payload.index] = action.payload;
      localStorage.setItem("data", JSON.stringify(users));
    },
  },
});

export const { saveUser, updateUser } = userSlice.actions;
export default userSlice.reducer;


import axios from '../utils/middlewares'
import React, { useState } from 'react'
import ProgressBar from 'react-bootstrap/ProgressBar'

const HomePage = () => {
  const [formValues, setFormValues] = useState([{ name: '', email: '', password: '', age: '', images: [] }])
  const [progressBars, setProgressBars] = useState([])

  const handleFile = (index, event) => {
    const files = Array.from(event.target.files)
    const newFormValues = [...formValues]
    newFormValues[index].images.push(...files)
    setFormValues(newFormValues)
    uploadFiles(files)
  }

  const handleDrop = (index, event) => {
    event.preventDefault()
    const files = Array.from(event.dataTransfer.files)
    const newFormValues = [...formValues]
    newFormValues[index].images.push(...files)
    setFormValues(newFormValues)
    uploadFiles(files)
  }

  const uploadFiles = (files) => {
    files.forEach((file, i) => {
      const formData = new FormData()
      formData.append('file', file)

      axios.post('http://localhost:3000/upload', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (val) => {
          const percent = Math.floor((100 * val.loaded) / val.total)
          setProgressBars((prev) => {
            const newProgress = [...prev]
            newProgress[i] = percent
            return newProgress
          })
        },
      }).catch((err) => console.log('Upload Error:', err))
    })
  }

  const handleChange = (i, e) => {
    let newFormValues = [...formValues]
    newFormValues[i][e.target.name] = e.target.value
    setFormValues(newFormValues)
  }

  const addFormFields = () => {
    setFormValues([...formValues, { name: '', email: '', password: '', age: '', images: [] }])
  }

  const removeFormFields = (i) => {
    let newFormValues = [...formValues]
    newFormValues.splice(i, 1)
    setFormValues(newFormValues)
  }

  const handleSubmit = (event) => {
    event.preventDefault()
    const user = JSON.parse(localStorage.getItem('form')) || []
    user.push(...formValues)
    localStorage.setItem('form', JSON.stringify(user))
    alert('Form Submitted')
  }

  return (
    <>
      <h3 style={{ marginLeft: '600px', paddingTop: '100px' }}>Add to Append</h3>
      <form style={{ margin: '70px' }} onSubmit={handleSubmit}>
        {formValues.map((element, index) => (
          <div className="form-inline" key={index}
            onDragOver={(e) => e.preventDefault()}
            onDrop={(e) => handleDrop(index, e)}>
            <div className="form-group">
              <label>UserName: </label><br />
              <input type="text" className="form-control" name="name" value={element.name || ''} onChange={(e) => handleChange(index, e)} placeholder="Enter username" />
              <br />
            </div>
            <div className="form-group">
              <label>Email: </label><br />
              <input type="text" className="form-control" name="email" value={element.email || ''} onChange={(e) => handleChange(index, e)} placeholder="Enter email" />
              <br />
            </div>
            <div className="form-group">
              <label>Password: </label><br />
              <input type="text" className="form-control" name="password" value={element.password || ''} onChange={(e) => handleChange(index, e)} placeholder="Enter password" />
              <br />
            </div>
            <div className="form-group">
              <label>Age: </label><br />
              <input type="text" className="form-control" name="age" value={element.age || ''} onChange={(e) => handleChange(index, e)} placeholder="Enter age" />
              <br />
            </div>
            <div className="form-group">
              <label>Upload Images: </label><br />
              <input type="file" className="form-control" multiple onChange={(e) => handleFile(index, e)} />
              <br />
              {progressBars.map((progress, i) => (
                <ProgressBar key={i}  variant={progress === 100 ? 'success' : 'info'} animated now={progress} label={`${progress}%`} style={{ width: '200px', margin: '5px' }} />
              ))}
              <div style={{ display: 'flex', flexWrap: 'wrap' }}>
                {element.images.map((img, i) => (
                  <img key={i} src={URL.createObjectURL(img)} alt="preview" style={{ width: '80px', height: '80px', margin: '5px' }} />
                ))}
              </div>
            </div>

            {index ? (
              <button type="button" className="btn btn-danger" onClick={() => removeFormFields(index)}>Remove</button>
            ) : null}

          </div>
        ))}
        <div className="button-section">
          <button className="btn btn-success" style={{ margin: '5px' }} type="button" onClick={() => addFormFields()}>Add</button>
          <button className="btn btn-primary" style={{ margin: '5px' }} type="submit">Submit</button>
        </div>
      </form>
    </>
  )
}

export default HomePage



